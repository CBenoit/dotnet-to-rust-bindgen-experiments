// Automatically generated by Diplomat

#pragma warning disable 0105
using System;
using System.Runtime.InteropServices;

using Devolutions.Picky.Diplomat;
#pragma warning restore 0105

namespace Devolutions.Picky;

#nullable enable

/// <summary>
/// SSH datetime.
/// </summary>
public partial class PickySshTime: IDisposable
{
    private unsafe Raw.PickySshTime* _inner;

    /// <summary>
    /// Creates a managed <c>PickySshTime</c> from a raw handle.
    /// </summary>
    /// <remarks>
    /// Safety: you should not build two managed objects using the same raw handle (may causes use-after-free and double-free).
    /// </remarks>
    /// <remarks>
    /// This constructor assumes the raw struct is allocated on Rust side.
    /// If implemented, the custom Drop implementation on Rust side WILL run on destruction.
    /// </remarks>
    public unsafe PickySshTime(Raw.PickySshTime* handle)
    {
        _inner = handle;
    }

    /// <returns>
    /// A <c>PickySshTime</c> allocated on Rust side.
    /// If a custom Drop implementation is implemented on Rust side, it WILL run on destruction.
    /// </returns>
    public static PickySshTime Now()
    {
        unsafe
        {
            Raw.PickySshTime* retVal = Raw.PickySshTime.Now();
            return new PickySshTime(retVal);
        }
    }

    /// <returns>
    /// A <c>PickySshTime</c> allocated on Rust side.
    /// If a custom Drop implementation is implemented on Rust side, it WILL run on destruction.
    /// </returns>
    public static PickySshTime FromTimestamp(ulong timestamp)
    {
        unsafe
        {
            Raw.PickySshTime* retVal = Raw.PickySshTime.FromTimestamp(timestamp);
            return new PickySshTime(retVal);
        }
    }

    public ulong Timestamp()
    {
        unsafe
        {
            if (_inner == null)
            {
                throw new ObjectDisposedException("PickySshTime");
            }
            ulong retVal = Raw.PickySshTime.Timestamp(_inner);
            return retVal;
        }
    }

    public byte Month()
    {
        unsafe
        {
            if (_inner == null)
            {
                throw new ObjectDisposedException("PickySshTime");
            }
            byte retVal = Raw.PickySshTime.Month(_inner);
            return retVal;
        }
    }

    public byte Day()
    {
        unsafe
        {
            if (_inner == null)
            {
                throw new ObjectDisposedException("PickySshTime");
            }
            byte retVal = Raw.PickySshTime.Day(_inner);
            return retVal;
        }
    }

    public byte Hour()
    {
        unsafe
        {
            if (_inner == null)
            {
                throw new ObjectDisposedException("PickySshTime");
            }
            byte retVal = Raw.PickySshTime.Hour(_inner);
            return retVal;
        }
    }

    public byte Minute()
    {
        unsafe
        {
            if (_inner == null)
            {
                throw new ObjectDisposedException("PickySshTime");
            }
            byte retVal = Raw.PickySshTime.Minute(_inner);
            return retVal;
        }
    }

    public byte Second()
    {
        unsafe
        {
            if (_inner == null)
            {
                throw new ObjectDisposedException("PickySshTime");
            }
            byte retVal = Raw.PickySshTime.Second(_inner);
            return retVal;
        }
    }

    public ushort Year()
    {
        unsafe
        {
            if (_inner == null)
            {
                throw new ObjectDisposedException("PickySshTime");
            }
            ushort retVal = Raw.PickySshTime.Year(_inner);
            return retVal;
        }
    }

    /// <summary>
    /// Returns the underlying raw handle.
    /// </summary>
    public unsafe Raw.PickySshTime* AsFFI()
    {
        return _inner;
    }

    /// <summary>
    /// Destroys the underlying object immediately.
    /// </summary>
    public void Dispose()
    {
        unsafe
        {
            if (_inner == null)
            {
                return;
            }

            Raw.PickySshTime.Destroy(_inner);
            _inner = null;

            GC.SuppressFinalize(this);
        }
    }

    ~PickySshTime()
    {
        Dispose();
    }
}
